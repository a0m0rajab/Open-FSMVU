{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location": "/outline/", "text": "1. discrete structurediscrete structure is a lesson in the computer engineering at university  .in tihs repository i will write the topics that covered at the lesson share home works and lab projects.course book :discrete mathematics and its applications.publisher : mc graw hill.auther :kenneth h. rosen.the topics that covered by weeks :            week      topic      extra                  1      propositional logic , applications of propositional logic                     2      propositional equivalences , predicates and quantifiers                     3      nested quantifiers , rules of inference                     4      introduction to proofs , proof methods and strategy                     5      basic structures: sets, functions and sequences                     6      basic structures:  functions, sums, and matrices                     7      algorithms                     8      mid term exams week                     9      cryptography and number theory                     10      cryptography and number theory                     11      induction and recursion                     12      counting                     13      counting and graph             2. data structureits a lesson in the university were we learn about the basic data structures like queue , stack , etc.            week      topic      extra                  1      introduction to the lesson and where to use data structure                     2      big o rotation and algorithm analyses                     3      linked list and generic classes                     4      stack its implementation and usage                     5      queue its implementation and usage                     6      searching   hashing and chaining                     7      recursive functions , searching algorithms and sorting                     8      mid term exams week                     9      trees and its implementation                     10      heap tree usage and implementation                     11      cancelled                     12      depth first search and breadth first search                     13      huffman coding and lempelziv             3. desgin softwarewe are taking labview and making a few applications on it at this lesson  .            week      topic      extra                  1      showing a few exambles from labview and programs that can be programmed by using it                     2      introduction to the program and defining the variables, comparing with normal programming languages                     3      arrays , index array , loops                     4      cluster data type and bundles                     5      case structure and if condition                     6      sequences local variables .                     7      clusters and arrays , the differnce and usage                     8      mid term exams week                     9      sub labview   sub vi                     10      formula node                     11      shared variable                     12      input/output at labview by myrio                     13      canceled             4. electrical circuit analysiselectrical circuit is the core of any device understanding them is important for our feild , you cant build an autonoum vechile witohut using it  .            week      topic      extra                  1      intoduction to electric , current and voltage .                     2      ohms law and power , kirchhoffs circuit law                     3      resistance calculating series and parallel                     4      loop and nodal analysis                     5      thevenin and norton laws                     6      max power transfer , super position                     7      solving problems                     8      mid term exams week                     9      inductance                     10      waiting lol                     11                            12                            13                    5. formal languages and automata theoryprofessor: mehmet akif eyler (eğler)book :introduction to automata theory, languages, and computationauther :hopcroft, motwani, ullman.            week      topic      extra                  1      languages and automata                     2      finite automata                     3      non deterministic finite automata                     4      regular expressions                     5      regular languages &amp; properties                     6      context free languages – quiz                     7      pushdown automata                     8      (midterm)                     9      toy language: microj                     10      turing machines                     11      decision problems: p and np                     12      easy problems in graph theory                     13      hard problems in graph theory             6. advanced programming techniquesprofessor: mehmet akif eyler (eğler)repository: weekly work &amp; term projectexamples: sample javascript pageseloquent javascript: our textbookoutline: weekly planning of the coursetools: chrome, git, github, gitkraken            week      topic      chap      api                  1      numbers and strings      1, 2      string              2      arrays and functions      3      array              3      objects – inspector      4      object              4      keyed collections      6      set &amp; map              5      fetching remote files      11      promise              6      reading local files      11      file              7      midterm                            8      css animations      14      animation              9      document object model      14      dom              10      drawing on canvas      17      canvas              11      image processing             transform              12      pixel art editor      19      imagedata              13      external api: maps             google maps              14      term project                            15      final                    gradingmidterm	20% 	quiz	10 	4xhw	10 	10xcw	10 	project	15 	final	357. system programming            week      date      topic              1      25.09      introduction,to,course.,intel,assembly,language.              2      02.10      interfacing,c,with,assembly              3      09.10      interfacing,c,with,assembly              4      16.10      linkers,and,loaders              5      23.10      the,linux,kernel,structure.,system,calls.              6      30.10      process,management,and,scheduling.              7      06.11      kernel,modules.              8      13.11      midterm              9      20.11      input/output,subsystem              10      27.11      input/output,subsystem              11      04.12      accessing,devices              12      11.12      device,drivers              13      18.12      device,drivers              14      25.12      user,space,file,system              15      01.01      holiday      grading            name      count      percentage              final      1      30              midterm      1      15              labwork      12      24              quiz      3      15              homeworks      2      16,      ", "title": "Courses outline"},{"location": "/about/", "text": "the projectthis project was made as a way to help students to learn more and interact with each other by sharing the needed knowledge.supportif you need help, please don’t hesitate to open an issue.contributeif you want to contribute to this website do not hesitate to open an issue, fix spelligs or even material.if you wanted to have your own site and write your own experience to publish it and publish your code, it’s simple just fork this repo and start editing the files.beside that you can add your repo to the contributors page.the templatethis website has made by using this template for a mkdocs jekyll theme:  vsoch/mkdocs jekyll", "title": "About"},{"location": "/archive/", "text": "news archive2019  jun 28, 2019: two thousand nineteen    jun 28, 2019: welcome to mkdocs jekyll  ", "title": "Articles"},{"location": "/feed.xml", "text": "      open fsmvu    open fsmvu   fatih sultan mehmet university courses.  a great way to check what they have :)     https://a0m0rajab.github.io/open fsmvu/        sun, 05 jul 2020 15:32:53 +0300    sun, 05 jul 2020 15:32:53 +0300    jekyll v3.1.6                  two thousand nineteen        &lt;p&gt;lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.&lt;/p&gt;        fri, 28 jun 2019 21:52:21 +0300        https://a0m0rajab.github.io/open fsmvu/2019/hello world/        https://a0m0rajab.github.io/open fsmvu/2019/hello world/                        jekyll                update                                welcome to mkdocs jekyll        &lt;p&gt;you’ll find this post in your &lt;code class=&quot;highlighter rouge&quot;&gt;_posts&lt;/code&gt; directory. go ahead and edit it and re build the site to see your changes. you can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto regenerates your site when a file is updated.&lt;/p&gt;&lt;!  more  &gt;&lt;p&gt;to add new posts, simply add a file in the &lt;code class=&quot;highlighter rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter rouge&quot;&gt;yyyy mm dd name of post.ext&lt;/code&gt; and includes the necessary front matter. take a look at the source for this post to get an idea about how it works.&lt;/p&gt;&lt;p&gt;jekyll also offers powerful support for code snippets:&lt;/p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language ruby&quot; data lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;hi, tom&#39; to stdout.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;p&gt;check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;jekyll docs&lt;/a&gt; for more info on how to get the most out of jekyll. file all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;jekyll’s github repo&lt;/a&gt;. if you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;jekyll talk&lt;/a&gt;.&lt;/p&gt;        fri, 28 jun 2019 13:52:21 +0300        https://a0m0rajab.github.io/open fsmvu/2019/welcome/        https://a0m0rajab.github.io/open fsmvu/2019/welcome/                        jekyll                update                    ", "title": ""},{"location": "/first_year/", "text": "1. discrete structurediscrete structure is a lesson in the computer engineering at university  .in tihs repository i will write the topics that covered at the lesson share home works and lab projects.course book :discrete mathematics and its applications.publisher : mc graw hill.auther :kenneth h. rosen.the topics that covered by weeks :            week      topic      extra                  1      propositional logic , applications of propositional logic                     2      propositional equivalences , predicates and quantifiers                     3      nested quantifiers , rules of inference                     4      introduction to proofs , proof methods and strategy                     5      basic structures: sets, functions and sequences                     6      basic structures:  functions, sums, and matrices                     7      algorithms                     8      mid term exams week                     9      cryptography and number theory                     10      cryptography and number theory                     11      induction and recursion                     12      counting                     13      counting and graph             2. data structureits a lesson in the university were we learn about the basic data structures like queue , stack , etc.            week      topic      extra                  1      introduction to the lesson and where to use data structure                     2      big o rotation and algorithm analyses                     3      linked list and generic classes                     4      stack its implementation and usage                     5      queue its implementation and usage                     6      searching   hashing and chaining                     7      recursive functions , searching algorithms and sorting                     8      mid term exams week                     9      trees and its implementation                     10      heap tree usage and implementation                     11      cancelled                     12      depth first search and breadth first search                     13      huffman coding and lempelziv             3. desgin softwarewe are taking labview and making a few applications on it at this lesson  .            week      topic      extra                  1      showing a few exambles from labview and programs that can be programmed by using it                     2      introduction to the program and defining the variables, comparing with normal programming languages                     3      arrays , index array , loops                     4      cluster data type and bundles                     5      case structure and if condition                     6      sequences local variables .                     7      clusters and arrays , the differnce and usage                     8      mid term exams week                     9      sub labview   sub vi                     10      formula node                     11      shared variable                     12      input/output at labview by myrio                     13      canceled             4. electrical circuit analysiselectrical circuit is the core of any device understanding them is important for our feild , you cant build an autonoum vechile witohut using it  .            week      topic      extra                  1      intoduction to electric , current and voltage .                     2      ohms law and power , kirchhoffs circuit law                     3      resistance calculating series and parallel                     4      loop and nodal analysis                     5      thevenin and norton laws                     6      max power transfer , super position                     7      solving problems                     8      mid term exams week                     9      inductance                     10      waiting lol                     11                            12                            13                    5. formal languages and automata theoryprofessor: mehmet akif eyler (eğler)book :introduction to automata theory, languages, and computationauther :hopcroft, motwani, ullman.            week      topic      extra                  1      languages and automata                     2      finite automata                     3      non deterministic finite automata                     4      regular expressions                     5      regular languages &amp; properties                     6      context free languages – quiz                     7      pushdown automata                     8      (midterm)                     9      toy language: microj                     10      turing machines                     11      decision problems: p and np                     12      easy problems in graph theory                     13      hard problems in graph theory             6. advanced programming techniquesprofessor: mehmet akif eyler (eğler)repository: weekly work &amp; term projectexamples: sample javascript pageseloquent javascript: our textbookoutline: weekly planning of the coursetools: chrome, git, github, gitkraken            week      topic      chap      api                  1      numbers and strings      1, 2      string              2      arrays and functions      3      array              3      objects – inspector      4      object              4      keyed collections      6      set &amp; map              5      fetching remote files      11      promise              6      reading local files      11      file              7      midterm                            8      css animations      14      animation              9      document object model      14      dom              10      drawing on canvas      17      canvas              11      image processing             transform              12      pixel art editor      19      imagedata              13      external api: maps             google maps              14      term project                            15      final                    gradingmidterm	20% 	quiz	10 	4xhw	10 	10xcw	10 	project	15 	final	35 system programming            week      date      topic              1      25.09      introduction,to,course.,intel,assembly,language.              2      02.10      interfacing,c,with,assembly              3      09.10      interfacing,c,with,assembly              4      16.10      linkers,and,loaders              5      23.10      the,linux,kernel,structure.,system,calls.              6      30.10      process,management,and,scheduling.              7      06.11      kernel,modules.              8      13.11      midterm              9      20.11      input/output,subsystem              10      27.11      input/output,subsystem              11      04.12      accessing,devices              12      11.12      device,drivers              13      18.12      device,drivers              14      25.12      user,space,file,system              15      01.01      holiday      grading |name|count|percentage||final|1|30||midterm|1|15||labwork|12|24||quiz|3|15||homeworks|2|16,|", "title": "Courses outline"},{"location": "/forum/", "text": "discussion forumwhat questions are being asked on ? the questions below are from the  category.", "title": "Discussion Forum"},{"location": "/", "text": "welcome to open fsmvuthis is a starter project for a future open source project lead by student of fsmvu university.why this project?  it will help any student in the world to learn computer engineering online.  it provides the basic information about computer engineering major for those who have not read or know about it before.  provide an interactive learning atmosphere between instructors and student by making everything clear to them.  make it clear about what is taught at university  help other students in the future to share their lessons, classes and write their own materials.  be a guide for future students at my university to get better understanding and gradesfatih sultan mehmet universityfsmvu is a university based in tukrey teaches a few majors like computer engineering and biyomedical engineering.how to use this guidethis guide made to show the curriculum of computer engineering major in the university and how to study it online, extra files can be found to show the homeworks and lessons materials.it will be a base for other students as well to get insights and ideas about the university.the best way to use it is by checking the needed section and read whatever is provided there.computer engineeringis a four year practical program.first yearin the first year you learn the basic programming syntax and main university courses related to engineering like mathematics .first semester            lesson name      brief info                  programming languages 1      basic java language              physic 1      serway 1              mathematics 1      calculus 1              introduction to computer engineering      brief history about computing and computer engineering major      second semester            lesson name      brief info                  programming languages 2      intro to database sql and gui with java              physic 2      serway 2              mathematics  2      calculus 2      second yearthird semester            lesson name      brief info                  discrete structures                     design software      an introduction to labview program              digital  systems      to fill soon              electric circuits      to fill soon      forth semester            lesson name      brief info                  statistics and probability                     data structures      to fill soon              oral and written communication in engineering      to fill soon      third yearfourth year", "title": "Open-FSMVU"},{"location": "/news/", "text": "newssubscribe with rss to keep up with the latest news.for site changes, see the changelog kept with the code base.&#9998; update change log   two thousand nineteen   june 28, 2019   warning badgedanger badge   lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.         welcome to mkdocs jekyll   june 28, 2019   primary badgesecondary badgeinfo badgesuccess badge   you’ll find this post in your _posts directory. go ahead and edit it and re build the site to see your changes. you can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto regenerates your site when a file is updated.         read more      want to see more? see the news archive.", "title": "News"},{"location": "/search/search_index.json", "text": "{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\ ]+"},"docs":[{% for page in site.pages %}{% unless page.excluded_in_search %}{% if added %},{% endif %}{% assign added = false %}{"location": "{{ page.url }}", "text": "{{ page.content | strip_html | strip_newlines | slugify: 'ascii' | replace: ' ', ' ' }}", "title": "{{ page.title }}"}{% assign added = true %}{% endunless %}{% endfor %}{% for post in site.posts %}{% unless page.excluded_in_search %}{% if added %},{% endif %}{% assign added = false %}{"location": "{{ post.url }}", "text": "{{ post.content | strip_html | strip_newlines | slugify: 'ascii' | replace: ' ',' ' }}", "title": "{{ post.title }}"}{% assign added = true %}{% endunless %}{% endfor %}{% for doc in site.docs %}{% unless doc.excluded_in_search %}{% if added %},{% endif %}{% assign added = false %}{"location": "{{ doc.url }}", "text": "{{ doc.content | strip_html | strip_newlines | slugify: 'ascii' | replace: ' ',' ' }}", "title": "{{ doc.title }}"}{% assign added = true %}{% endunless %}{% endfor %}]}", "title": ""},{"location": "/sitemap.xml", "text": "         /     {{ "now" | date: "%y %m %d" }}     daily    {% for section in site.data.toc %}     {{ site.baseurl }}{{ section.url }}/     {{ "now" | date: "%y %m %d" }}     daily    {% endfor %}", "title": ""},{"location": "/2019/hello-world/", "text": "lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.", "title": "Two Thousand Nineteen"},{"location": "/2019/welcome/", "text": "you’ll find this post in your _posts directory. go ahead and edit it and re build the site to see your changes. you can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto regenerates your site when a file is updated.to add new posts, simply add a file in the _posts directory that follows the convention yyyy mm dd name of post.ext and includes the necessary front matter. take a look at the source for this post to get an idea about how it works.jekyll also offers powerful support for code snippets:def print_hi(name)  puts "hi, #{name}"endprint_hi('tom')#=&gt; prints 'hi, tom' to stdout.check out the jekyll docs for more info on how to get the most out of jekyll. file all bugs/feature requests at jekyll’s github repo. if you have questions, you can ask them on jekyll talk.", "title": "Welcome to MkDocs Jekyll"},{"location": "/docs/example-page", "text": "a nested pagethis is an example of a page that doesn’t have a permalink defined, andis not included in the table of contents (_data/toc.yml). this meansthat it will render based on it’s path. since it’s in docs/example page.md,the url will be docs/example page/.link to a subfoldernow let’s say we want to link to a subfolder, specifically with thissetup:docs/  example page.md  (   we are here  subfolder/     example page.md  (   we want to link hereyou can provide the relative path to the file, like subfolder/example page.mdand jekyll will handle parsing it. for example:  here is that linkand here is the same link, but generated with the include statement:{% include doc.html name="here" path="subfolder/example page" %}", "title": "A Nested Page"},{"location": "/docs/extras/example-quiz", "text": "quizzesas of version 0.0.12, mkdocs jekyll has support for basic quizzes! these areintended to help educate your users about the content of your documentation.for a quiz, you can add a new file to the folder _data/quizzes, and write a questions file based on the format shown in _data/quizzes/example quiz.yml.here is a simple example of a multiple choice question (which can also serve as true/false):title: this is the quiz titlerandomized: falsequestions:   type: "multiple choice"   question: "true or false, pittsburgh is west of philadelphia"   items:      choice: true      correct: true      choice: false      correct: false   followup: |       the answer is true! pittsburgh is 304.9 miles west of       philadelphia, or approximately a car ride of       4 hours and 52 minutes. buckle up!the quiz is rendered with a “show answer” button below each question, and whenthe user clicks it, any questions that are flagged with correct: true will be bolded, and if a followup section is included, it will be displayed.see the live example at the end of this page.optionstitleif you include a title, it will be rendered at the top of the quiz. this isoptional   you can leave it out and add it before the include on the page.randomif you want your questions to be presented randomly, just add randomized: trueto the data.example quizif i want to include the quiz located at _data/quizzes/example quiz.yml, i can do so like this:{% include quiz.html file='example quiz' %}the rendered quiz is shown here:this is the quiz titlewhat is your favorite color?1. red2. blue3. greenshow answerthere is no correct answer to asking your favorite color! all choices would be good.true or false, pittsburgh is west of philadelphia1. true2. falseshow answerthe answer is true! pittsburgh is 304.9 miles west of philadelphia, or approximately a car ride of 4 hours and 52 minutes. buckle up!", "title": "Quiz"},{"location": "/docs/extras/index", "text": "extrasextras include other integrations that aren’t relevant to style or customization,but can further enhance your documentation pages. currently, we have supportfor adding interactive quizzes.  quizzeswould you like to see another question type, or another kind of extra? please[open an issue])(https://github.com/a0m0rajab/open fsmvu/issues/new).", "title": "Extras"},{"location": "/docs/getting-started", "text": "getting startedfeaturesuser interactionif you look at any header field on the page, you’ll notice three little dots (called an elipsis) that if you mouse over, will open up to give you optionsfor permalink, edit this page, and ask a question. these are to ensure that a user is able to link someone else directly to a sectionof interest (permalink), contribute a fix or suggestion to the documentation itself on github(edit this page) or open up an issue that links directly to where the user hasthe question. documentation is hard, and sometimes unclear, and the siteshould make it easy to ask a question or suggest a change.searchthe entire site, including posts and documentation, is indexed and then availablefor search at the top of the page. give it a try! the content is renderedfrom this fileinto this json data structurethat feeds into the search defined in assets/js/application.js. if you want toexclude any file from search, add this to its front end matter:   layout: nullexcluded_in_search: true   the example above is for a css file in the assets folder that is used as a template, but should not be included in search. if you need to disable search entirely for a page, you can add the disable_search header:   layout: nulldisable_search: true   disabling search will remove the search box at the top.external searchif you have an external site with a search get endpoint (meaning one that endsin ?q=&lt;term&gt;, then you can automatically link page tags to search this endpoint.for example, on an hpc site i’d want a tag like “mpi” to do a search on http://ask.cyberinfrastructure.org for mpi.see the tags section below for how to configure this.discourse forumif you have a discourse forum that you want to show questions from,there is an easy way to embed them here. specifically, there is an include {% include embed/discourse.html %} that is deployed at /forum and added to the table of contents under extra  &gt; discussion forum. you can add this include to wherever you want the questions to appear. the follow parameters are defined in the config.yml:discourse_site: "https://ask.cyberinfrastructure.org" discourse_per_page: 10discourse_category: "stanford research computing"discourse_tags: null # comma separated string, leave null to not filterfor the above, we embed 10 topics from the stanford research computing category of askci, and render 10 per page. since there are few topics, we don’t filter down to tags. if we did, we should provide a list of comma separated values.the page looks like this and is live here:note that you aren’t required to only embed one category   you can easily modify the code to include more than one by copy pasting the d topics list.infoto use this for your discourse site, you must enable the 'embed topics' setting.documentationdocumentation pages should be written in the docs folder of the repository,and you are allowed to use whatever level of nesting (subfolders) that works for you! it’s a jekyll collection, which means that youcan add other content (images, scripts) and it will be included for linking to.organizationthe url that will render is based on the path. for example, if we had the following structure:docs/  getting started.md  clusters/     sherlock/         getting started.mdthe first page (akin to the one you are reading) would render at it’s path,/docs/getting started/.linkingfrom that page, we could provide thedirect path in markdown to any subfolder to link to it, such as the secondgetting started page for sherlock:[example](clusters/sherlock/getting started.md)here is an example link to a relative path of a file (example page.md)in the same directory, and from that page you can test linking to a subfoldr.in the case of not having a subfolder, we could write the link out directly:[example]({{ site.baseurl }}/docs/clusters/sherlock/getting started.md)or better, there is a shortand trick! we can use the provided “includes” template to do the same based on the path to create a link:{% include doc.html name="sherlock cluster" path="clusters/sherlock/getting started" %}the path should be relative to the docs folder.headerswhile this is a personal preference, it’s recommended to create nesting of your docs via markdown sections in each of the filesover creating more files. for example, take a look at the rightside of this page, and you’ll see a level represented for each header.this strategy means that we have fewer overall pages (easier to find content)that are still browsable easily via search or the table of contents on the right.pagesthe pages folder uses the same page layout, but is not part of the docs collection.the two are provided to create a distinction between website pages (e.g., about,feed.xml) and documentation pages.navigationwhether you place your page under “pages” or “docs,” for those pages that you want added to the navigation, you should add them to _data/toc.yml. if you’ve defined a permalink in thefront end matter, you can use that (e.g., “about” below). if you haven’t andwant to link to docs, the url is the path starting with the docs folder.here is an example of a flat structure:    title: "getting started"    url: "docs/getting started/"    title: "about"    url: "about"    title: "news"    url: "news"and here is an example with nested children (currently active in the example):    title: "getting started"    url: "docs/getting started"    children:        title: features        url: "docs/getting started#features"        title: development        url: "docs/getting started#development"        title: customization        url: "docs/getting started#customization"    title: "about"    url: "about"    title: "news"    url: "news"if you want to add an external url for a parent or child, do this:    title: github repository    external_url: https://www.github.com/vsoch/mkdocs jekyllnews postsit might be the case that your site or group has news items that wouldwarrent sharing with the community, and should be available as a feed.for this reason, you can write traditional posts in the _postsfolder that will parse into the site feedthe bottom of the page links the user to a post archive, where posts are organizedaccording to the year.buttonsbuttons come in a nice array of colors. here is the code for a basic example,and you’d want to vary the .btn &lt;tag&gt; to get different classes.&lt;button class="btn btn success"&gt;.btn success&lt;/button&gt;.btn success.btn info.btn secondary.btn primary.btn danger.btn warningbadgesfor news post items, it’s nice to be able to tag it with something that indicatesa status, such as “warning” or “alert.” for this reason, you can add badges tothe front end matter of any post page, and they will render colored by a type,with the tag of your choice. for example, here is an example header fora post:   title:  "two thousand nineteen"date:   2019 06 28 18:52:21categories: jekyll updatebadges:   type: warning   tag: warning badge   type: danger   tag: danger badge   and here is the post preview with the rendered badges that it produces:warning badgedanger badgeand the other badges that you can define include success, info, secondary,and primary.success badgeinfo badgesecondary badgeprimary badgealertswhat is an alert?an alert is a box that can stand out to indicate important information. you can choose from levels success, warning, danger, info, and primary. this example is an info box, and the code for another might look like this:{% include alert.html type="info" title="here is another!" %}just for fun, here are all the types:tldrtldr means too long, didn't readtipthis is a tip.infothis is a piece of information, or you can use todo.questionthis is a question.warningthis is a warningdangerthis alerts danger!successthis alerts successquotesyou can include block quotes to emphasize text.  here is an example. isn’t this much more prominent to the user?developmentinitially (on os x), you will need to setup brew which is a package manager for os x and git. to install brew and git, run the following commands:/usr/bin/ruby  e "$(curl  fssl https://raw.githubusercontent.com/homebrew/install/master/install)"brew install gitif you are on debian/ubuntu, then you can easily install git with apt getapt get update &amp;&amp; apt get install  y gitinstall jekyllyou can also install jekyll with brew.$ brew install ruby$ gem install jekyll$ gem install bundler$ bundle installon ubuntu i do a different method:git clone https://github.com/rbenv/ruby build.git ~/.rbenv/plugins/ruby buildecho 'export path="$home/.rbenv/plugins/ruby build/bin:$path"' &gt;&gt; ~/.bashrcexec $shellrbenv install 2.3.1rbenv global 2.3.1gem install bundlerrbenv rehashruby  v# railscurl  sl https://deb.nodesource.com/setup_4.x | sudo  e bash  sudo apt get install  y nodejsgem install rails  v 4.2.6rbenv rehash# jekyllgem install jekyllgem install github pagesgem install jekyll sass converterrbenv rehashget the codeyou should first fork the repository to your github organization or username,and then clone it.$ git clone https://github.com/&lt;username&lt;/mkdocs jekyll.git docs$ cd docsyou can clone the repository right to where you want to host the docs:$ git clone https://github.com/&lt;username&gt;/mkdocs jekyll.git docs$ cd docsservedepending on how you installed jekyll:jekyll serve# orbundle exec jekyll servepreviewwe provide a circleci configuration recipe that youcan use to preview your site on circleci before merging into master. youshould follow the instructions to set up a project,and then in the project settings be sure to enable building forked build requests,and to cancel redundant builds. the preview will be built on circleci, and savedto static files for you to browse. the only change you will need is to editthe static files location to be the name of your respository, which is at tebottom of the .circleci/config.yml file:        store_artifacts:          path: ~/repo/_site          destination: mkdocs jekyllin the above, the destination should coincide with your repository name.remember that for most links, circleci won’t honor an index.html file in a subfolder(e.g., subfolder/index.html will not be served as subfolder/, so for example,you might need to turn this:https://&lt;circleci&gt;/0/mkdocs jekyll/docs/getting started/into this:https://&lt;circleci&gt;/0/mkdocs jekyll/docs/getting started/index.htmlcustomizationconfig.ymlto edit configuration values, customize the _config.yml.most are documented there, and please open an issue if you have questions.adding pagesto add pages, write them into the pages folder. you define urls based on the permalink attribute in your pages,and then add them to the navigation by adding to the content of _data/toc.yml.tagsif you include tags on a page, by default they won’t link to anything. however,if you define a tag_search_endpoint url in your configuration file, by clickingthe tag, the user will be taken to this page to search for it. as an example,we define the current search endpoint to be ask cyberinfrastructure, andpage tags link to a search on it:tag_search_endpoint: https://ask.cyberinfrastructure.org/search?q=tag_color: danger # danger, success, warning, primary, secondary, infonote that you can also choose a color! the tags appear at the top of the page,as they do on this page. the tags should be defined like this in the front endmatter:tags:    jekyll   githubthey are appended to the first h1 block, so generally your pages should have a header.", "title": "Getting Started"},{"location": "/docs/subfolder/example-page", "text": "a nested pagethis is an example of a page that doesn’t have a permalink defined, andis not included in the table of contents (_data/toc.yml).", "title": "A Nested Page"}]}
